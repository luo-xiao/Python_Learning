# https://pythonprogramming.net/using-our-own-data-tensorflow-deep-learning-tutorial/?completed=/tensorflow-neural-network-session-machine-learning-tutorial/
# train NN to classify positiven & negative sentiments with own data
# positive sentences: https://pythonprogramming.net/static/downloads/machine-learning-data/pos.txt (~5000 utt)
# negative sentences: https://pythonprogramming.net/static/downloads/machine-learning-data/neg.txt
'''
for FFNN:
- input size must be unified
- words must be indexed, so that they can be represented by vectors --> lexicon
'''

import nltk # need pip & download first
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer
import numpy as np
import random
import pickle
from collecitns import Counter

lemmatizer = WordNetLemmatizer()
hm_lines = 10000000
# MemoryError rises when RAM is run out


# https://pythonprogramming.net/preprocessing-tensorflow-deep-learning-tutorial/?completed=/using-our-own-data-tensorflow-deep-learning-tutorial/
def create_lexicon(pos, neg):
    lexicon = []
    for fi in [pos, neg]:
        with open(fi,'r') as f:
            contents = f.readlines()
            for l in contents[:hmlines]:
                all_words = word_tokenize(l.lower())
                lexicon += list(all_words)

    lexicon = [lemmatizer.lemmatize(i) for i in lexicon]
    w_counts = Counter(lexicon)
    # w_counts = {'the':52521, 'and':1432, ...}
    l2 = []
    for w in w_counts:
        if 1000 > w_counts[w] > 50:
            l2.append(w)
    print(len(l2))        
    return l2   # final lexicon
    
def sample_handling(sample, lexicon, classification):
    featureset = []  # list of lists
    with open(sample,'r') as f:
        contents = f.readlines()
        for l in contents[:hm_lines]:
            current_words = word_tokenize(l.lower())
            current_words = [lemmatizer.lemmatize(i) for i in current_words]
            features = np.zeros(len(lexicon))
            for word in current_words:
                if word.lower() in lexicon:
                    index_value = lexicon.index(word.lower())
                    features[index_values] += 1
            features = list(features)
            featureset.append([features, classification])
            
    return featureset      
    
def create_feature_sets_and_labels(pos, neg, test_size=0.1):    
    lexicon = create_lexicon(pos, neg)
    features = []
    features += sample_handling('pos.txt', lexicon, [1,0])
    features += sample_handling('neg.txt', lexicon, [0,1])
    random.shuffle(features)   # to reach tf.argmax([output]) == tf.argmax([expectations])
    
    features = np.array(features)
    
    testing_size = int(test_size*len(features))
    
    train_x = list(features[:,0][:-testing_size])   # no label
    train_y = list(features[:,1][:-testing_size])   # only label
    
    test_x = list(features[:,0][-testing_size:])   # get the last 10%
    test_y = list(features[:,1][-testing_size:])
    
    return train_x, train_y, test_x, test_y
    
    
if __name__ == '__main__':
    train_x,train_y,test_x,test_y = create_feature_sets_and_labels('pos.txt','neg.txt')
    with open('sentiment_set.pickle','wb) as f:
        pickle.dump([train_x,train_y,test_x,test_y], f)

